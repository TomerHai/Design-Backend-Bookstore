# Note that personal data (access ID / secret ID / account ID) was replaced below with XXXXXX.

(base) D:\test>terraform init
Initializing the backend...
Initializing modules...
- api_gateway in modules\api_gateway
- cognito in modules\cognito
- database in modules\database
- iam_policy in modules\iam_policy
- iam_roles in modules\iam_roles
- lambda in modules\lambda
- storage in modules\storage

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Finding latest version of hashicorp/archive...
- Installing hashicorp/aws v5.43.0...
- Installed hashicorp/aws v5.43.0 (signed by HashiCorp)
- Installing hashicorp/archive v2.4.2...
- Installed hashicorp/archive v2.4.2 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

(base) D:\test> terraform validate
Success! The configuration is valid.


(base) D:\test> terraform plan -out terraform-bookstore-plan.zip
var.access_key
  The aws development account access key

  Enter a value: XXXXXXXXX

var.secret_key
  The aws development account secret key

  Enter a value: XXXXXXXXXX

data.aws_caller_identity.current: Reading...
data.aws_caller_identity.current: Read complete after 0s [id=XXXXXXXXX]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # aws_iam_role_policy_attachment.lambda_invoke_attachment will be created
  + resource "aws_iam_role_policy_attachment" "lambda_invoke_attachment" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "IAM-Bookstore-task-role"
    }

  # aws_ssm_parameter.dynamodb_table_name will be created
  + resource "aws_ssm_parameter" "dynamodb_table_name" {
      + arn            = (known after apply)
      + data_type      = (known after apply)
      + id             = (known after apply)
      + insecure_value = (known after apply)
      + key_id         = (known after apply)
      + name           = "/app/bookstore/dynamodb_table_name"
      + tags_all       = (known after apply)
      + tier           = (known after apply)
      + type           = "String"
      + value          = (sensitive value)
      + version        = (known after apply)
    }

  # aws_ssm_parameter.s3_bucket_name will be created
  + resource "aws_ssm_parameter" "s3_bucket_name" {
      + arn            = (known after apply)
      + data_type      = (known after apply)
      + id             = (known after apply)
      + insecure_value = (known after apply)
      + key_id         = (known after apply)
      + name           = "/app/bookstore/s3_bucket_name"
      + tags_all       = (known after apply)
      + tier           = (known after apply)
      + type           = "String"
      + value          = (sensitive value)
      + version        = (known after apply)
    }

  # module.api_gateway.aws_api_gateway_authorizer.cognito_authorizer will be created
  + resource "aws_api_gateway_authorizer" "cognito_authorizer" {
      + arn                              = (known after apply)
      + authorizer_result_ttl_in_seconds = 300
      + id                               = (known after apply)
      + identity_source                  = "method.request.header.Authorization"
      + name                             = "cognito_authorizer"
      + provider_arns                    = (known after apply)
      + rest_api_id                      = (known after apply)
      + type                             = "COGNITO_USER_POOLS"
    }

  # module.api_gateway.aws_api_gateway_deployment.bookstore_deployment will be created
  + resource "aws_api_gateway_deployment" "bookstore_deployment" {
      + created_date  = (known after apply)
      + execution_arn = (known after apply)
      + id            = (known after apply)
      + invoke_url    = (known after apply)
      + rest_api_id   = (known after apply)
    }

  # module.api_gateway.aws_api_gateway_integration.lambda_integration will be created
  + resource "aws_api_gateway_integration" "lambda_integration" {
      + cache_namespace         = (known after apply)
      + connection_type         = "INTERNET"
      + http_method             = "POST"
      + id                      = (known after apply)
      + integration_http_method = "POST"
      + passthrough_behavior    = "WHEN_NO_MATCH"
      + resource_id             = (known after apply)
      + rest_api_id             = (known after apply)
      + timeout_milliseconds    = 29000
      + type                    = "AWS"
      + uri                     = (known after apply)
    }

  # module.api_gateway.aws_api_gateway_integration_response.proxy will be created
  + resource "aws_api_gateway_integration_response" "proxy" {
      + http_method = "POST"
      + id          = (known after apply)
      + resource_id = (known after apply)
      + rest_api_id = (known after apply)
      + status_code = "200"
    }

  # module.api_gateway.aws_api_gateway_method.BookstoreManager will be created
  + resource "aws_api_gateway_method" "BookstoreManager" {
      + api_key_required = false
      + authorization    = "COGNITO_USER_POOLS"
      + authorizer_id    = (known after apply)
      + http_method      = "POST"
      + id               = (known after apply)
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # module.api_gateway.aws_api_gateway_method_response.BookstoreManager will be created
  + resource "aws_api_gateway_method_response" "BookstoreManager" {
      + http_method = "POST"
      + id          = (known after apply)
      + resource_id = (known after apply)
      + rest_api_id = (known after apply)
      + status_code = "200"
    }

  # module.api_gateway.aws_api_gateway_resource.root will be created
  + resource "aws_api_gateway_resource" "root" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "bookstore"
      + rest_api_id = (known after apply)
    }

  # module.api_gateway.aws_api_gateway_rest_api.BookstoreOperations will be created
  + resource "aws_api_gateway_rest_api" "BookstoreOperations" {
      + api_key_source               = (known after apply)
      + arn                          = (known after apply)
      + binary_media_types           = (known after apply)
      + created_date                 = (known after apply)
      + description                  = (known after apply)
      + disable_execute_api_endpoint = (known after apply)
      + execution_arn                = (known after apply)
      + id                           = (known after apply)
      + minimum_compression_size     = (known after apply)
      + name                         = "BookstoreOperations"
      + policy                       = (known after apply)
      + root_resource_id             = (known after apply)
      + tags_all                     = (known after apply)

      + endpoint_configuration {
          + types            = [
              + "REGIONAL",
            ]
          + vpc_endpoint_ids = (known after apply)
        }
    }

  # module.api_gateway.aws_lambda_permission.allow_api_gateway_to_invoke will be created
  + resource "aws_lambda_permission" "allow_api_gateway_to_invoke" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "Lambda-bookstore-task"
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + source_arn          = "arn:aws:execute-api:il-central-1:XXXXXXXX:*/*/POST/bookstore"
      + statement_id        = "allow-api-gateway-invoke-Lambda-bookstore-task"
      + statement_id_prefix = (known after apply)
    }

  # module.cognito.aws_cognito_user.example will be created
  + resource "aws_cognito_user" "example" {
      + creation_date         = (known after apply)
      + enabled               = true
      + id                    = (known after apply)
      + last_modified_date    = (known after apply)
      + mfa_setting_list      = (known after apply)
      + password              = (sensitive value)
      + preferred_mfa_setting = (known after apply)
      + status                = (known after apply)
      + sub                   = (known after apply)
      + user_pool_id          = (known after apply)
      + username              = "tomer"
    }

  # module.cognito.aws_cognito_user_pool.pool will be created
  + resource "aws_cognito_user_pool" "pool" {
      + arn                        = (known after apply)
      + creation_date              = (known after apply)
      + custom_domain              = (known after apply)
      + deletion_protection        = "INACTIVE"
      + domain                     = (known after apply)
      + email_verification_message = (known after apply)
      + email_verification_subject = (known after apply)
      + endpoint                   = (known after apply)
      + estimated_number_of_users  = (known after apply)
      + id                         = (known after apply)
      + last_modified_date         = (known after apply)
      + mfa_configuration          = "OFF"
      + name                       = "mypool"
      + sms_verification_message   = (known after apply)
      + tags_all                   = (known after apply)
    }

  # module.cognito.aws_cognito_user_pool_client.api_client will be created
  + resource "aws_cognito_user_pool_client" "api_client" {
      + access_token_validity                         = (known after apply)
      + allowed_oauth_flows                           = [
          + "code",
          + "implicit",
        ]
      + allowed_oauth_flows_user_pool_client          = true
      + allowed_oauth_scopes                          = [
          + "aws.cognito.signin.user.admin",
          + "email",
          + "openid",
          + "profile",
        ]
      + auth_session_validity                         = (known after apply)
      + callback_urls                                 = [
          + "https://www.google.com",
        ]
      + client_secret                                 = (sensitive value)
      + default_redirect_uri                          = (known after apply)
      + enable_propagate_additional_user_context_data = (known after apply)
      + enable_token_revocation                       = (known after apply)
      + explicit_auth_flows                           = [
          + "ADMIN_NO_SRP_AUTH",
          + "USER_PASSWORD_AUTH",
        ]
      + generate_secret                               = false
      + id                                            = (known after apply)
      + id_token_validity                             = (known after apply)
      + logout_urls                                   = (known after apply)
      + name                                          = "client"
      + prevent_user_existence_errors                 = (known after apply)
      + read_attributes                               = (known after apply)
      + refresh_token_validity                        = (known after apply)
      + supported_identity_providers                  = [
          + "COGNITO",
        ]
      + user_pool_id                                  = (known after apply)
      + write_attributes                              = (known after apply)
    }

  # module.database.aws_dynamodb_table.bookstore will be created
  + resource "aws_dynamodb_table" "bookstore" {
      + arn              = (known after apply)
      + billing_mode     = "PAY_PER_REQUEST"
      + hash_key         = "ISBN"
      + id               = (known after apply)
      + name             = "bookstore"
      + read_capacity    = (known after apply)
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags_all         = (known after apply)
      + write_capacity   = (known after apply)

      + attribute {
          + name = "ISBN"
          + type = "S"
        }
    }

  # module.iam_policy.aws_iam_policy.IAM-Bookstore-task-policy will be created
  + resource "aws_iam_policy" "IAM-Bookstore-task-policy" {
      + arn         = (known after apply)
      + description = "IAM-Bookstore-task-policy"
      + id          = (known after apply)
      + name        = "IAM-Bookstore-task-policy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = (known after apply)
      + policy_id   = (known after apply)
      + tags_all    = (known after apply)
    }

  # module.iam_roles.aws_iam_role.IAM-Bookstore-task-role will be created
  + resource "aws_iam_role" "IAM-Bookstore-task-role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "IAM-Bookstore-task-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # module.lambda.data.archive_file.lambda_package will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "archive_file" "lambda_package" {
      + id                  = (known after apply)
      + output_base64sha256 = (known after apply)
      + output_base64sha512 = (known after apply)
      + output_md5          = (known after apply)
      + output_path         = "lambda-function.zip"
      + output_sha          = (known after apply)
      + output_sha256       = (known after apply)
      + output_sha512       = (known after apply)
      + output_size         = (known after apply)
      + source_file         = "Lambda-bookstore-task.py"
      + type                = "zip"
    }

  # module.lambda.aws_cloudwatch_log_group.lambda_logs will be created
  + resource "aws_cloudwatch_log_group" "lambda_logs" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/aws/lambda/Lambda-bookstore-task"
      + name_prefix       = (known after apply)
      + retention_in_days = 7
      + skip_destroy      = false
      + tags_all          = (known after apply)
    }

  # module.lambda.aws_lambda_function.Lambda-bookstore-task will be created
  + resource "aws_lambda_function" "Lambda-bookstore-task" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + filename                       = "lambda-function.zip"
      + function_name                  = "Lambda-bookstore-task"
      + handler                        = "Lambda-bookstore-task.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.12"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + logging_config {
          + log_format = "JSON"
          + log_group  = (known after apply)
        }
    }

  # module.storage.aws_s3_bucket.book_images will be created
  + resource "aws_s3_bucket" "book_images" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bookstore-task-images"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags_all                    = (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)
    }

Plan: 21 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: terraform-bookstore-plan.zip

To perform exactly these actions, run the following command to apply:
    terraform apply "terraform-bookstore-plan.zip"

(base) D:\test> terraform apply terraform-bookstore-plan.zip
module.iam_roles.aws_iam_role.IAM-Bookstore-task-role: Creating...
module.database.aws_dynamodb_table.bookstore: Creating...
module.cognito.aws_cognito_user_pool.pool: Creating...
module.storage.aws_s3_bucket.book_images: Creating...
module.cognito.aws_cognito_user_pool.pool: Creation complete after 1s [id=il-central-1_YSB4ZeUI0]
module.cognito.aws_cognito_user.example: Creating...
module.cognito.aws_cognito_user_pool_client.api_client: Creating...
module.storage.aws_s3_bucket.book_images: Creation complete after 1s [id=bookstore-task-images]
aws_ssm_parameter.s3_bucket_name: Creating...
module.cognito.aws_cognito_user_pool_client.api_client: Creation complete after 0s [id=3g7t93earu6k3vkucv7uq6fi1k]
module.iam_roles.aws_iam_role.IAM-Bookstore-task-role: Creation complete after 1s [id=IAM-Bookstore-task-role]
module.lambda.aws_cloudwatch_log_group.lambda_logs: Creating...
module.lambda.data.archive_file.lambda_package: Reading...
module.lambda.data.archive_file.lambda_package: Read complete after 0s [id=9e701ed84f1499152e4565146a1b1c2b5783cb96]
module.lambda.aws_lambda_function.Lambda-bookstore-task: Creating...
aws_ssm_parameter.s3_bucket_name: Creation complete after 0s [id=/app/bookstore/s3_bucket_name]
module.lambda.aws_cloudwatch_log_group.lambda_logs: Creation complete after 0s [id=/aws/lambda/Lambda-bookstore-task]
module.cognito.aws_cognito_user.example: Creation complete after 0s [id=il-central-1_YSB4ZeUI0/tomer]
module.database.aws_dynamodb_table.bookstore: Creation complete after 6s [id=bookstore]
aws_ssm_parameter.dynamodb_table_name: Creating...
aws_ssm_parameter.dynamodb_table_name: Creation complete after 1s [id=/app/bookstore/dynamodb_table_name]
module.lambda.aws_lambda_function.Lambda-bookstore-task: Still creating... [10s elapsed]
module.lambda.aws_lambda_function.Lambda-bookstore-task: Creation complete after 13s [id=Lambda-bookstore-task]
module.iam_policy.aws_iam_policy.IAM-Bookstore-task-policy: Creating...
module.api_gateway.aws_api_gateway_rest_api.BookstoreOperations: Creating...
module.iam_policy.aws_iam_policy.IAM-Bookstore-task-policy: Creation complete after 1s [id=arn:aws:iam::XXXXXXXX:policy/IAM-Bookstore-task-policy]
aws_iam_role_policy_attachment.lambda_invoke_attachment: Creating...
module.api_gateway.aws_api_gateway_rest_api.BookstoreOperations: Creation complete after 1s [id=52uo1t4f0e]
module.api_gateway.aws_api_gateway_resource.root: Creating...
module.api_gateway.aws_api_gateway_authorizer.cognito_authorizer: Creating...
module.api_gateway.aws_api_gateway_authorizer.cognito_authorizer: Creation complete after 0s [id=ihuwvc]
module.api_gateway.aws_api_gateway_resource.root: Creation complete after 0s [id=xm48zb]
module.api_gateway.aws_api_gateway_method.BookstoreManager: Creating...
module.api_gateway.aws_api_gateway_method.BookstoreManager: Creation complete after 0s [id=agm-52uo1t4f0e-xm48zb-POST]
aws_iam_role_policy_attachment.lambda_invoke_attachment: Creation complete after 0s [id=IAM-Bookstore-task-role-20240331163207201000000001]
module.api_gateway.aws_api_gateway_method_response.BookstoreManager: Creating...
module.api_gateway.aws_lambda_permission.allow_api_gateway_to_invoke: Creating...
module.api_gateway.aws_api_gateway_integration.lambda_integration: Creating...
module.api_gateway.aws_api_gateway_method_response.BookstoreManager: Creation complete after 0s [id=agmr-52uo1t4f0e-xm48zb-POST-200]
module.api_gateway.aws_lambda_permission.allow_api_gateway_to_invoke: Creation complete after 0s [id=allow-api-gateway-invoke-Lambda-bookstore-task]
module.api_gateway.aws_api_gateway_integration.lambda_integration: Creation complete after 0s [id=agi-52uo1t4f0e-xm48zb-POST]
module.api_gateway.aws_api_gateway_integration_response.proxy: Creating...
module.api_gateway.aws_api_gateway_deployment.bookstore_deployment: Creating...
module.api_gateway.aws_api_gateway_integration_response.proxy: Creation complete after 1s [id=agir-52uo1t4f0e-xm48zb-POST-200]
module.api_gateway.aws_api_gateway_deployment.bookstore_deployment: Creation complete after 1s [id=7h9cif]

Apply complete! Resources: 21 added, 0 changed, 0 destroyed.

(base) D:\test>
